<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lfm.system.mapper.SysCollegeMapper">

	<resultMap type="SysCollege" id="SysCollegeResult">
		<id     property="collegeId"     column="college_id"     />
		<result property="parentId"   column="parent_id"   />
		<result property="ancestors"  column="ancestors"   />
		<result property="collegeName"   column="college_name"   />
		<result property="orderNum"   column="order_num"   />
		<result property="status"     column="status"      />
		<result property="delFlag"    column="del_flag"    />
		<result property="parentName" column="parent_name" />
		<result property="createBy"   column="create_by"   />
		<result property="createTime" column="create_time" />
		<result property="updateBy"   column="update_by"   />
		<result property="updateTime" column="update_time" />
	</resultMap>

	<sql id="selectCollegeVo">
        select d.college_id, d.parent_id, d.ancestors, d.college_name, d.order_num, d.status, d.del_flag, d.create_by, d.create_time
        from sys_college d
    </sql>

	<select id="selectCollegeList" parameterType="SysCollege" resultMap="SysCollegeResult">
		<include refid="selectCollegeVo"/>
		where d.del_flag = '0'
		<if test="parentId != null and parentId != 0">
			AND parent_id = #{parentId}
		</if>
		<if test="collegeName != null and collegeName != ''">
			AND college_name like concat('%', #{collegeName}, '%')
		</if>
		<if test="status != null and status != ''">
			AND status = #{status}
		</if>
		<!-- 数据范围过滤 -->
		${params.dataScope}
		order by d.parent_id, d.order_num
	</select>

	<select id="selectCollegeListByRoleId" resultType="Integer">
		select d.college_id
		from sys_college d
		left join sys_role_college rd on d.college_id = rd.college_id
		where rd.role_id = #{roleId}
		<if test="collegeCheckStrictly">
			and d.college_id not in (select d.parent_id from sys_college d inner join sys_role_college rd on d.college_id = rd.college_id and rd.role_id = #{roleId})
		</if>
		order by d.parent_id, d.order_num
	</select>

	<select id="selectCollegeById" parameterType="Long" resultMap="SysCollegeResult">
		<include refid="selectCollegeVo"/>
		where college_id = #{collegeId}
	</select>

	<select id="checkCollegeExistUser" parameterType="Long" resultType="int">
		select count(1) from sys_user where college_id = #{collegeId} and del_flag = '0'
	</select>

	<select id="hasChildByCollegeId" parameterType="Long" resultType="int">
		select count(1) from sys_college
		where del_flag = '0' and parent_id = #{collegeId} limit 1
	</select>

	<select id="selectChildrenCollegeById" parameterType="Long" resultMap="SysCollegeResult">
		select * from sys_college where find_in_set(#{collegeId}, ancestors)
	</select>

	<select id="selectNormalChildrenCollegeById" parameterType="Long" resultType="int">
		select count(*) from sys_college where status = 0 and del_flag = '0' and find_in_set(#{collegeId}, ancestors)
	</select>

	<select id="checkCollegeNameUnique" resultMap="SysCollegeResult">
		<include refid="selectCollegeVo"/>
		where college_name=#{collegeName} and parent_id = #{parentId} limit 1
	</select>

	<insert id="insertCollege" parameterType="SysCollege">
		insert into sys_college(
		<if test="collegeId != null and collegeId != 0">college_id,</if>
		<if test="parentId != null and parentId != 0">parent_id,</if>
		<if test="collegeName != null and collegeName != ''">college_name,</if>
		<if test="ancestors != null and ancestors != ''">ancestors,</if>
		<if test="orderNum != null and orderNum != ''">order_num,</if>
		<if test="status != null">status,</if>
		<if test="createBy != null and createBy != ''">create_by,</if>
		create_time
		)values(
		<if test="collegeId != null and collegeId != 0">#{collegeId},</if>
		<if test="parentId != null and parentId != 0">#{parentId},</if>
		<if test="collegeName != null and collegeName != ''">#{collegeName},</if>
		<if test="ancestors != null and ancestors != ''">#{ancestors},</if>
		<if test="orderNum != null and orderNum != ''">#{orderNum},</if>
		<if test="status != null">#{status},</if>
		<if test="createBy != null and createBy != ''">#{createBy},</if>
		sysdate()
		)
	</insert>

	<update id="updateCollege" parameterType="SysCollege">
		update sys_college
		<set>
			<if test="parentId != null and parentId != 0">parent_id = #{parentId},</if>
			<if test="collegeName != null and collegeName != ''">college_name = #{collegeName},</if>
			<if test="ancestors != null and ancestors != ''">ancestors = #{ancestors},</if>
			<if test="orderNum != null and orderNum != ''">order_num = #{orderNum},</if>
			<if test="status != null and status != ''">status = #{status},</if>
			<if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
			update_time = sysdate()
		</set>
		where college_id = #{collegeId}
	</update>

	<update id="updateCollegeChildren" parameterType="java.util.List">
		update sys_college set ancestors =
		<foreach collection="colleges" item="item" index="index"
				 separator=" " open="case college_id" close="end">
			when #{item.collegeId} then #{item.ancestors}
		</foreach>
		where college_id in
		<foreach collection="colleges" item="item" index="index"
				 separator="," open="(" close=")">
			#{item.collegeId}
		</foreach>
	</update>

	<update id="updateCollegeStatus" parameterType="SysCollege">
		update sys_college
		<set>
			<if test="status != null and status != ''">status = #{status},</if>
			<if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
			update_time = sysdate()
		</set>
		where college_id in (${ancestors})
	</update>

	<delete id="deleteCollegeById" parameterType="Long">
		update sys_college set del_flag = '2' where college_id = #{collegeId}
	</delete>

</mapper> 